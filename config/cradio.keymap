#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        asset {
            bindings = <&tog 1>;
            key-positions = <30 33>;
            timeout-ms = <500>;
            require-prior-idle-ms = <1>;
            slow-release;
            layers = <0 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 3  &kp SPACE    &kp RET  &mo 2
            >;
        };

        layer_3 {
            bindings = <
&kp Q  &kp W  &kp J  &kp F   &kp G     &kp Y   &kp P   &kp U      &kp L    &kp SEMI
&kp A  &kp S  &kp E  &kp T   &kp D     &kp H   &kp N   &kp I      &kp O    &kp R
&kp Z  &kp X  &kp C  &kp V   &kp B     &kp K   &kp M   &kp COMMA  &kp DOT  &kp FSLH
                     &trans  &trans    &trans  &trans
            >;
        };

        layer_1 {
            bindings = <
&trans        &trans        &trans  &trans          &trans       &bootloader  &trans  &trans  &trans  &kp BACKSPACE
&kp NUMBER_1  &kp NUMBER_2  &trans  &trans          &trans       &trans       &trans  &trans  &trans  &kp NUMBER_0
&trans        &trans        &trans  &trans          &trans       &trans       &trans  &trans  &trans  &trans
                                    &sk LEFT_SHIFT  &sk LCTRL    &trans       &trans
            >;
        };

        layer_2 {
            bindings = <
&bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &bootloader    &trans  &trans  &trans  &trans  &trans
&bt BT_PRV  &bt BT_NXT      &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans
&trans      &trans          &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans         &trans  &trans
            >;
        };
    };
};
